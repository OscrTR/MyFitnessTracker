// GENERATED CODE - DO NOT MODIFY BY HAND
// This code was generated by ObjectBox. To update it run the generator again
// with `dart run build_runner build`.
// See also https://docs.objectbox.io/getting-started#generate-objectbox-code

// ignore_for_file: camel_case_types, depend_on_referenced_packages
// coverage:ignore-file

import 'dart:typed_data';

import 'package:flat_buffers/flat_buffers.dart' as fb;
import 'package:objectbox/internal.dart'
    as obx_int; // generated code can access "internal" functionality
import 'package:objectbox/objectbox.dart' as obx;
import 'package:objectbox_flutter_libs/objectbox_flutter_libs.dart';

import 'features/exercise_management/models/exercise.dart';
import 'features/training_history/models/history_entry.dart';
import 'features/training_history/models/history_run_location.dart';
import 'features/training_history/models/training_version.dart';
import 'features/training_management/models/multiset.dart';
import 'features/training_management/models/training.dart';
import 'features/training_management/models/training_exercise.dart';

export 'package:objectbox/objectbox.dart'; // so that callers only have to import this file

final _entities = <obx_int.ModelEntity>[
  obx_int.ModelEntity(
      id: const obx_int.IdUid(4, 1371781158635934480),
      name: 'Exercise',
      lastPropertyId: const obx_int.IdUid(6, 5199546075756722168),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 5819755668094325734),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 271087027588398860),
            name: 'name',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 693625742645067785),
            name: 'imagePath',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 2216787406317418660),
            name: 'description',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 7319180526493872213),
            name: 'dbType',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(6, 5199546075756722168),
            name: 'dbMuscleGroups',
            type: 9,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(5, 790968269672532113),
      name: 'TrainingVersion',
      lastPropertyId: const obx_int.IdUid(8, 913685373474112095),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 2848876468079718365),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(7, 3458214617607180662),
            name: 'linkedTrainingId',
            type: 6,
            flags: 8,
            indexId: const obx_int.IdUid(13, 6974256475971044142)),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(8, 913685373474112095),
            name: 'jsonRepresentation',
            type: 9,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(6, 7860540944696488375),
      name: 'Multiset',
      lastPropertyId: const obx_int.IdUid(9, 3032517674823575647),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 3442040008755328633),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 6671430147116830668),
            name: 'linkedTrainingId',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 3402731635653132558),
            name: 'sets',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 1210678755157978570),
            name: 'setRest',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 2685867409624267045),
            name: 'multisetRest',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(6, 4854710513260180367),
            name: 'specialInstructions',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(7, 1979155653513170343),
            name: 'objectives',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(8, 567372947661191374),
            name: 'position',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(9, 3032517674823575647),
            name: 'key',
            type: 9,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[
        obx_int.ModelRelation(
            id: const obx_int.IdUid(7, 8334379565981685192),
            name: 'trainingExercises',
            targetId: const obx_int.IdUid(8, 6393605471041917069))
      ],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(7, 950078833293376110),
      name: 'Training',
      lastPropertyId: const obx_int.IdUid(5, 6937022375926523412),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 5716125867718126388),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 5697647034108672045),
            name: 'name',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 5408884100845279239),
            name: 'objectives',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 8154658271902018234),
            name: 'dbType',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 6937022375926523412),
            name: 'dbTrainingDays',
            type: 9,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[
        obx_int.ModelRelation(
            id: const obx_int.IdUid(8, 6295459699345603544),
            name: 'trainingExercises',
            targetId: const obx_int.IdUid(8, 6393605471041917069)),
        obx_int.ModelRelation(
            id: const obx_int.IdUid(9, 8756662863016031796),
            name: 'multisets',
            targetId: const obx_int.IdUid(6, 7860540944696488375)),
        obx_int.ModelRelation(
            id: const obx_int.IdUid(10, 5640924886941127514),
            name: 'trainingVersions',
            targetId: const obx_int.IdUid(5, 790968269672532113))
      ],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(8, 6393605471041917069),
      name: 'TrainingExercise',
      lastPropertyId: const obx_int.IdUid(24, 3428839521455793776),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 7233649129788789460),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 2110457089031691776),
            name: 'linkedTrainingId',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 1043621449581499339),
            name: 'linkedMultisetId',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 4715930644238922926),
            name: 'linkedExerciseId',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 5069939222520283239),
            name: 'exerciseId',
            type: 11,
            flags: 520,
            indexId: const obx_int.IdUid(10, 7811118391172708957),
            relationTarget: 'Exercise'),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(6, 5138442013940761739),
            name: 'specialInstructions',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(7, 3748741041803109348),
            name: 'objectives',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(8, 3692182349580161862),
            name: 'targetDistance',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(9, 8633010299637026081),
            name: 'targetDuration',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(10, 5905551217545730530),
            name: 'isTargetPaceSelected',
            type: 1,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(11, 961043050292835888),
            name: 'targetPace',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(12, 4966953995751443114),
            name: 'sets',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(13, 3512167299558175100),
            name: 'isSetsInReps',
            type: 1,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(14, 459606010243869292),
            name: 'minReps',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(15, 7694982355074057394),
            name: 'maxReps',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(16, 6374355417343731040),
            name: 'duration',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(17, 1692162694443466661),
            name: 'setRest',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(18, 2661360366898262131),
            name: 'exerciseRest',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(19, 8171908829888186439),
            name: 'isAutoStart',
            type: 1,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(20, 2600108328923433813),
            name: 'position',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(21, 1828390091259774739),
            name: 'intensity',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(22, 5796668711548666317),
            name: 'key',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(23, 79247986742799092),
            name: 'dbType',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(24, 3428839521455793776),
            name: 'dbRunType',
            type: 6,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(9, 3821391270278984653),
      name: 'HistoryEntry',
      lastPropertyId: const obx_int.IdUid(13, 5357017449888742192),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 1202102945155801650),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 759658472392615631),
            name: 'linkedTrainingId',
            type: 6,
            flags: 8,
            indexId: const obx_int.IdUid(11, 404464184818398324)),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 1388466592994179384),
            name: 'linkedTrainingVersionId',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 8399788429246015951),
            name: 'linkedTrainingExerciseId',
            type: 6,
            flags: 8,
            indexId: const obx_int.IdUid(12, 4914535975276213714)),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 5131062754587907804),
            name: 'setNumber',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(6, 7858472305094376572),
            name: 'intervalNumber',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(7, 1107473113922232000),
            name: 'date',
            type: 10,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(8, 955105224773308255),
            name: 'reps',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(9, 7165512611319607455),
            name: 'weight',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(10, 3207129095682776037),
            name: 'duration',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(11, 8312239276116873916),
            name: 'distance',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(12, 7365023370072387070),
            name: 'pace',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(13, 5357017449888742192),
            name: 'calories',
            type: 6,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(10, 736439548103471689),
      name: 'RunLocation',
      lastPropertyId: const obx_int.IdUid(10, 1234639187600418317),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 5743143731714757881),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 5932305188348334297),
            name: 'linkedTrainingId',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 6918431226825001339),
            name: 'linkedTrainingExerciseId',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 6206192423764166985),
            name: 'setNumber',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 1876648930540348526),
            name: 'latitude',
            type: 8,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(6, 1250084718218949796),
            name: 'longitude',
            type: 8,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(7, 5897119805137802194),
            name: 'altitude',
            type: 8,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(8, 3307788763215710895),
            name: 'timestamp',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(9, 6528187627267363548),
            name: 'accuracy',
            type: 8,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(10, 1234639187600418317),
            name: 'speed',
            type: 8,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[])
];

/// Shortcut for [obx.Store.new] that passes [getObjectBoxModel] and for Flutter
/// apps by default a [directory] using `defaultStoreDirectory()` from the
/// ObjectBox Flutter library.
///
/// Note: for desktop apps it is recommended to specify a unique [directory].
///
/// See [obx.Store.new] for an explanation of all parameters.
///
/// For Flutter apps, also calls `loadObjectBoxLibraryAndroidCompat()` from
/// the ObjectBox Flutter library to fix loading the native ObjectBox library
/// on Android 6 and older.
Future<obx.Store> openStore(
    {String? directory,
    int? maxDBSizeInKB,
    int? maxDataSizeInKB,
    int? fileMode,
    int? maxReaders,
    bool queriesCaseSensitiveDefault = true,
    String? macosApplicationGroup}) async {
  await loadObjectBoxLibraryAndroidCompat();
  return obx.Store(getObjectBoxModel(),
      directory: directory ?? (await defaultStoreDirectory()).path,
      maxDBSizeInKB: maxDBSizeInKB,
      maxDataSizeInKB: maxDataSizeInKB,
      fileMode: fileMode,
      maxReaders: maxReaders,
      queriesCaseSensitiveDefault: queriesCaseSensitiveDefault,
      macosApplicationGroup: macosApplicationGroup);
}

/// Returns the ObjectBox model definition for this project for use with
/// [obx.Store.new].
obx_int.ModelDefinition getObjectBoxModel() {
  final model = obx_int.ModelInfo(
      entities: _entities,
      lastEntityId: const obx_int.IdUid(10, 736439548103471689),
      lastIndexId: const obx_int.IdUid(13, 6974256475971044142),
      lastRelationId: const obx_int.IdUid(10, 5640924886941127514),
      lastSequenceId: const obx_int.IdUid(0, 0),
      retiredEntityUids: const [
        7837023745425483267,
        2932161035028909040,
        4756948127312470496
      ],
      retiredIndexUids: const [
        1997644619502088310,
        262618515223658650,
        1984868986684376430,
        9077253555612493925,
        5680325267104003293,
        3749658864148140912,
        746187908374442006,
        9020215719984396004
      ],
      retiredPropertyUids: const [
        7117997750659844272,
        7208038991482613170,
        8957684371679850546,
        2995742759851243026,
        5528278541389928687,
        7592199348303741118,
        1581587549710862424,
        4041142347862379862,
        2732075275205302973,
        5572835714115388081,
        8588810811449880299,
        2015978338742949354,
        6819686565950909175,
        8719446480133154916,
        6013580209830941836,
        2508266651475172113,
        1435541522072950637,
        1717837802590117520,
        6039037355741241067,
        8381868419772571920,
        201493524754498310,
        7425754225602225605,
        3515765141364894896,
        3135303093556622218,
        5016644797159749358,
        6786941717840464610,
        3629004880923664589,
        6108871729213740517,
        7429479038024413978,
        7569012901362455937,
        8107865731497299671,
        5459245783809742483,
        4621418631557638427,
        1852368107492337616,
        8806688819027779267,
        128248959963900822,
        1223404940800654621,
        2924402670291120286,
        1980150629980597560,
        4906135197889964248,
        7894728641131780750,
        979885308642330532,
        5357601499003534908,
        4603778332535153773,
        597337282396317998,
        702072385444039418,
        3729112720790051269,
        4843306632898592410,
        8546346913216974507,
        505361365510310397,
        6290711620444277774
      ],
      retiredRelationUids: const [2220873685979633358, 525592784003240916],
      modelVersion: 5,
      modelVersionParserMinimum: 5,
      version: 1);

  final bindings = <Type, obx_int.EntityDefinition>{
    Exercise: obx_int.EntityDefinition<Exercise>(
        model: _entities[0],
        toOneRelations: (Exercise object) => [],
        toManyRelations: (Exercise object) => {},
        getId: (Exercise object) => object.id,
        setId: (Exercise object, int id) {
          object.id = id;
        },
        objectToFB: (Exercise object, fb.Builder fbb) {
          final nameOffset = fbb.writeString(object.name);
          final imagePathOffset = object.imagePath == null
              ? null
              : fbb.writeString(object.imagePath!);
          final descriptionOffset = object.description == null
              ? null
              : fbb.writeString(object.description!);
          final dbMuscleGroupsOffset = object.dbMuscleGroups == null
              ? null
              : fbb.writeString(object.dbMuscleGroups!);
          fbb.startTable(7);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, nameOffset);
          fbb.addOffset(2, imagePathOffset);
          fbb.addOffset(3, descriptionOffset);
          fbb.addInt64(4, object.dbType);
          fbb.addOffset(5, dbMuscleGroupsOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final nameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 6, '');
          final object = Exercise(nameParam)
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0)
            ..imagePath = const fb.StringReader(asciiOptimization: true)
                .vTableGetNullable(buffer, rootOffset, 8)
            ..description = const fb.StringReader(asciiOptimization: true)
                .vTableGetNullable(buffer, rootOffset, 10)
            ..dbType =
                const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 12)
            ..dbMuscleGroups = const fb.StringReader(asciiOptimization: true)
                .vTableGetNullable(buffer, rootOffset, 14);

          return object;
        }),
    TrainingVersion: obx_int.EntityDefinition<TrainingVersion>(
        model: _entities[1],
        toOneRelations: (TrainingVersion object) => [],
        toManyRelations: (TrainingVersion object) => {},
        getId: (TrainingVersion object) => object.id,
        setId: (TrainingVersion object, int id) {
          object.id = id;
        },
        objectToFB: (TrainingVersion object, fb.Builder fbb) {
          final jsonRepresentationOffset = object.jsonRepresentation == null
              ? null
              : fbb.writeString(object.jsonRepresentation!);
          fbb.startTable(9);
          fbb.addInt64(0, object.id);
          fbb.addInt64(6, object.linkedTrainingId);
          fbb.addOffset(7, jsonRepresentationOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final linkedTrainingIdParam =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 16);
          final jsonRepresentationParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 18);
          final object = TrainingVersion(
              linkedTrainingIdParam, jsonRepresentationParam)
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);

          return object;
        }),
    Multiset: obx_int.EntityDefinition<Multiset>(
        model: _entities[2],
        toOneRelations: (Multiset object) => [],
        toManyRelations: (Multiset object) => {
              obx_int.RelInfo<Multiset>.toMany(7, object.id):
                  object.trainingExercises
            },
        getId: (Multiset object) => object.id,
        setId: (Multiset object, int id) {
          object.id = id;
        },
        objectToFB: (Multiset object, fb.Builder fbb) {
          final specialInstructionsOffset = object.specialInstructions == null
              ? null
              : fbb.writeString(object.specialInstructions!);
          final objectivesOffset = object.objectives == null
              ? null
              : fbb.writeString(object.objectives!);
          final keyOffset =
              object.key == null ? null : fbb.writeString(object.key!);
          fbb.startTable(10);
          fbb.addInt64(0, object.id);
          fbb.addInt64(1, object.linkedTrainingId);
          fbb.addInt64(2, object.sets);
          fbb.addInt64(3, object.setRest);
          fbb.addInt64(4, object.multisetRest);
          fbb.addOffset(5, specialInstructionsOffset);
          fbb.addOffset(6, objectivesOffset);
          fbb.addInt64(7, object.position);
          fbb.addOffset(8, keyOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final idParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          final linkedTrainingIdParam =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 6);
          final setsParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 8, 0);
          final setRestParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 10, 0);
          final multisetRestParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 12, 0);
          final positionParam =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 18);
          final keyParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 20);
          final object = Multiset(
              id: idParam,
              linkedTrainingId: linkedTrainingIdParam,
              sets: setsParam,
              setRest: setRestParam,
              multisetRest: multisetRestParam,
              position: positionParam,
              key: keyParam)
            ..specialInstructions =
                const fb.StringReader(asciiOptimization: true)
                    .vTableGetNullable(buffer, rootOffset, 14)
            ..objectives = const fb.StringReader(asciiOptimization: true)
                .vTableGetNullable(buffer, rootOffset, 16);
          obx_int.InternalToManyAccess.setRelInfo<Multiset>(
              object.trainingExercises,
              store,
              obx_int.RelInfo<Multiset>.toMany(7, object.id));
          return object;
        }),
    Training: obx_int.EntityDefinition<Training>(
        model: _entities[3],
        toOneRelations: (Training object) => [],
        toManyRelations: (Training object) => {
              obx_int.RelInfo<Training>.toMany(8, object.id):
                  object.trainingExercises,
              obx_int.RelInfo<Training>.toMany(9, object.id): object.multisets,
              obx_int.RelInfo<Training>.toMany(10, object.id):
                  object.trainingVersions
            },
        getId: (Training object) => object.id,
        setId: (Training object, int id) {
          object.id = id;
        },
        objectToFB: (Training object, fb.Builder fbb) {
          final nameOffset = fbb.writeString(object.name);
          final objectivesOffset = object.objectives == null
              ? null
              : fbb.writeString(object.objectives!);
          final dbTrainingDaysOffset = object.dbTrainingDays == null
              ? null
              : fbb.writeString(object.dbTrainingDays!);
          fbb.startTable(6);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, nameOffset);
          fbb.addOffset(2, objectivesOffset);
          fbb.addInt64(3, object.dbType);
          fbb.addOffset(4, dbTrainingDaysOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final nameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 6, '');
          final object = Training(nameParam)
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0)
            ..objectives = const fb.StringReader(asciiOptimization: true)
                .vTableGetNullable(buffer, rootOffset, 8)
            ..dbType =
                const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 10)
            ..dbTrainingDays = const fb.StringReader(asciiOptimization: true)
                .vTableGetNullable(buffer, rootOffset, 12);
          obx_int.InternalToManyAccess.setRelInfo<Training>(
              object.trainingExercises,
              store,
              obx_int.RelInfo<Training>.toMany(8, object.id));
          obx_int.InternalToManyAccess.setRelInfo<Training>(object.multisets,
              store, obx_int.RelInfo<Training>.toMany(9, object.id));
          obx_int.InternalToManyAccess.setRelInfo<Training>(
              object.trainingVersions,
              store,
              obx_int.RelInfo<Training>.toMany(10, object.id));
          return object;
        }),
    TrainingExercise: obx_int.EntityDefinition<TrainingExercise>(
        model: _entities[4],
        toOneRelations: (TrainingExercise object) => [object.exercise],
        toManyRelations: (TrainingExercise object) => {},
        getId: (TrainingExercise object) => object.id,
        setId: (TrainingExercise object, int id) {
          object.id = id;
        },
        objectToFB: (TrainingExercise object, fb.Builder fbb) {
          final specialInstructionsOffset = object.specialInstructions == null
              ? null
              : fbb.writeString(object.specialInstructions!);
          final objectivesOffset = object.objectives == null
              ? null
              : fbb.writeString(object.objectives!);
          final keyOffset =
              object.key == null ? null : fbb.writeString(object.key!);
          fbb.startTable(25);
          fbb.addInt64(0, object.id);
          fbb.addInt64(1, object.linkedTrainingId);
          fbb.addInt64(2, object.linkedMultisetId);
          fbb.addInt64(3, object.linkedExerciseId);
          fbb.addInt64(4, object.exercise.targetId);
          fbb.addOffset(5, specialInstructionsOffset);
          fbb.addOffset(6, objectivesOffset);
          fbb.addInt64(7, object.targetDistance);
          fbb.addInt64(8, object.targetDuration);
          fbb.addBool(9, object.isTargetPaceSelected);
          fbb.addInt64(10, object.targetPace);
          fbb.addInt64(11, object.sets);
          fbb.addBool(12, object.isSetsInReps);
          fbb.addInt64(13, object.minReps);
          fbb.addInt64(14, object.maxReps);
          fbb.addInt64(15, object.duration);
          fbb.addInt64(16, object.setRest);
          fbb.addInt64(17, object.exerciseRest);
          fbb.addBool(18, object.isAutoStart);
          fbb.addInt64(19, object.position);
          fbb.addInt64(20, object.intensity);
          fbb.addOffset(21, keyOffset);
          fbb.addInt64(22, object.dbType);
          fbb.addInt64(23, object.dbRunType);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final setsParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 26, 0);
          final isSetsInRepsParam =
              const fb.BoolReader().vTableGet(buffer, rootOffset, 28, false);
          final isAutoStartParam =
              const fb.BoolReader().vTableGet(buffer, rootOffset, 40, false);
          final intensityParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 44, 0);
          final object = TrainingExercise(
              sets: setsParam,
              isSetsInReps: isSetsInRepsParam,
              isAutoStart: isAutoStartParam,
              intensity: intensityParam)
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0)
            ..linkedTrainingId =
                const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 6)
            ..linkedMultisetId =
                const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 8)
            ..linkedExerciseId =
                const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 10)
            ..specialInstructions =
                const fb.StringReader(asciiOptimization: true)
                    .vTableGetNullable(buffer, rootOffset, 14)
            ..objectives = const fb.StringReader(asciiOptimization: true)
                .vTableGetNullable(buffer, rootOffset, 16)
            ..targetDistance =
                const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 18)
            ..targetDuration =
                const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 20)
            ..isTargetPaceSelected =
                const fb.BoolReader().vTableGetNullable(buffer, rootOffset, 22)
            ..targetPace =
                const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 24)
            ..minReps =
                const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 30)
            ..maxReps =
                const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 32)
            ..duration =
                const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 34)
            ..setRest =
                const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 36)
            ..exerciseRest =
                const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 38)
            ..position =
                const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 42)
            ..key = const fb.StringReader(asciiOptimization: true)
                .vTableGetNullable(buffer, rootOffset, 46)
            ..dbType =
                const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 48)
            ..dbRunType = const fb.Int64Reader()
                .vTableGetNullable(buffer, rootOffset, 50);
          object.exercise.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 12, 0);
          object.exercise.attach(store);
          return object;
        }),
    HistoryEntry: obx_int.EntityDefinition<HistoryEntry>(
        model: _entities[5],
        toOneRelations: (HistoryEntry object) => [],
        toManyRelations: (HistoryEntry object) => {},
        getId: (HistoryEntry object) => object.id,
        setId: (HistoryEntry object, int id) {
          object.id = id;
        },
        objectToFB: (HistoryEntry object, fb.Builder fbb) {
          fbb.startTable(14);
          fbb.addInt64(0, object.id);
          fbb.addInt64(1, object.linkedTrainingId);
          fbb.addInt64(2, object.linkedTrainingVersionId);
          fbb.addInt64(3, object.linkedTrainingExerciseId);
          fbb.addInt64(4, object.setNumber);
          fbb.addInt64(5, object.intervalNumber);
          fbb.addInt64(6, object.date.millisecondsSinceEpoch);
          fbb.addInt64(7, object.reps);
          fbb.addInt64(8, object.weight);
          fbb.addInt64(9, object.duration);
          fbb.addInt64(10, object.distance);
          fbb.addInt64(11, object.pace);
          fbb.addInt64(12, object.calories);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final idParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          final linkedTrainingIdParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 6, 0);
          final linkedTrainingVersionIdParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 8, 0);
          final linkedTrainingExerciseIdParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 10, 0);
          final setNumberParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 12, 0);
          final intervalNumberParam =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 14);
          final dateParam = DateTime.fromMillisecondsSinceEpoch(
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 16, 0));
          final repsParam =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 18);
          final weightParam =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 20);
          final durationParam =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 22);
          final distanceParam =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 24);
          final paceParam =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 26);
          final caloriesParam =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 28);
          final object = HistoryEntry(
              id: idParam,
              linkedTrainingId: linkedTrainingIdParam,
              linkedTrainingVersionId: linkedTrainingVersionIdParam,
              linkedTrainingExerciseId: linkedTrainingExerciseIdParam,
              setNumber: setNumberParam,
              intervalNumber: intervalNumberParam,
              date: dateParam,
              reps: repsParam,
              weight: weightParam,
              duration: durationParam,
              distance: distanceParam,
              pace: paceParam,
              calories: caloriesParam);

          return object;
        }),
    RunLocation: obx_int.EntityDefinition<RunLocation>(
        model: _entities[6],
        toOneRelations: (RunLocation object) => [],
        toManyRelations: (RunLocation object) => {},
        getId: (RunLocation object) => object.id,
        setId: (RunLocation object, int id) {
          object.id = id;
        },
        objectToFB: (RunLocation object, fb.Builder fbb) {
          fbb.startTable(11);
          fbb.addInt64(0, object.id);
          fbb.addInt64(1, object.linkedTrainingId);
          fbb.addInt64(2, object.linkedTrainingExerciseId);
          fbb.addInt64(3, object.setNumber);
          fbb.addFloat64(4, object.latitude);
          fbb.addFloat64(5, object.longitude);
          fbb.addFloat64(6, object.altitude);
          fbb.addInt64(7, object.timestamp);
          fbb.addFloat64(8, object.accuracy);
          fbb.addFloat64(9, object.speed);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final idParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          final linkedTrainingIdParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 6, 0);
          final linkedTrainingExerciseIdParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 8, 0);
          final setNumberParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 10, 0);
          final latitudeParam =
              const fb.Float64Reader().vTableGet(buffer, rootOffset, 12, 0);
          final longitudeParam =
              const fb.Float64Reader().vTableGet(buffer, rootOffset, 14, 0);
          final altitudeParam =
              const fb.Float64Reader().vTableGet(buffer, rootOffset, 16, 0);
          final timestampParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 18, 0);
          final accuracyParam =
              const fb.Float64Reader().vTableGet(buffer, rootOffset, 20, 0);
          final speedParam =
              const fb.Float64Reader().vTableGet(buffer, rootOffset, 22, 0);
          final object = RunLocation(
              id: idParam,
              linkedTrainingId: linkedTrainingIdParam,
              linkedTrainingExerciseId: linkedTrainingExerciseIdParam,
              setNumber: setNumberParam,
              latitude: latitudeParam,
              longitude: longitudeParam,
              altitude: altitudeParam,
              timestamp: timestampParam,
              accuracy: accuracyParam,
              speed: speedParam);

          return object;
        })
  };

  return obx_int.ModelDefinition(model, bindings);
}

/// [Exercise] entity fields to define ObjectBox queries.
class Exercise_ {
  /// See [Exercise.id].
  static final id =
      obx.QueryIntegerProperty<Exercise>(_entities[0].properties[0]);

  /// See [Exercise.name].
  static final name =
      obx.QueryStringProperty<Exercise>(_entities[0].properties[1]);

  /// See [Exercise.imagePath].
  static final imagePath =
      obx.QueryStringProperty<Exercise>(_entities[0].properties[2]);

  /// See [Exercise.description].
  static final description =
      obx.QueryStringProperty<Exercise>(_entities[0].properties[3]);

  /// See [Exercise.dbType].
  static final dbType =
      obx.QueryIntegerProperty<Exercise>(_entities[0].properties[4]);

  /// See [Exercise.dbMuscleGroups].
  static final dbMuscleGroups =
      obx.QueryStringProperty<Exercise>(_entities[0].properties[5]);
}

/// [TrainingVersion] entity fields to define ObjectBox queries.
class TrainingVersion_ {
  /// See [TrainingVersion.id].
  static final id =
      obx.QueryIntegerProperty<TrainingVersion>(_entities[1].properties[0]);

  /// See [TrainingVersion.linkedTrainingId].
  static final linkedTrainingId =
      obx.QueryIntegerProperty<TrainingVersion>(_entities[1].properties[1]);

  /// See [TrainingVersion.jsonRepresentation].
  static final jsonRepresentation =
      obx.QueryStringProperty<TrainingVersion>(_entities[1].properties[2]);
}

/// [Multiset] entity fields to define ObjectBox queries.
class Multiset_ {
  /// See [Multiset.id].
  static final id =
      obx.QueryIntegerProperty<Multiset>(_entities[2].properties[0]);

  /// See [Multiset.linkedTrainingId].
  static final linkedTrainingId =
      obx.QueryIntegerProperty<Multiset>(_entities[2].properties[1]);

  /// See [Multiset.sets].
  static final sets =
      obx.QueryIntegerProperty<Multiset>(_entities[2].properties[2]);

  /// See [Multiset.setRest].
  static final setRest =
      obx.QueryIntegerProperty<Multiset>(_entities[2].properties[3]);

  /// See [Multiset.multisetRest].
  static final multisetRest =
      obx.QueryIntegerProperty<Multiset>(_entities[2].properties[4]);

  /// See [Multiset.specialInstructions].
  static final specialInstructions =
      obx.QueryStringProperty<Multiset>(_entities[2].properties[5]);

  /// See [Multiset.objectives].
  static final objectives =
      obx.QueryStringProperty<Multiset>(_entities[2].properties[6]);

  /// See [Multiset.position].
  static final position =
      obx.QueryIntegerProperty<Multiset>(_entities[2].properties[7]);

  /// See [Multiset.key].
  static final key =
      obx.QueryStringProperty<Multiset>(_entities[2].properties[8]);

  /// see [Multiset.trainingExercises]
  static final trainingExercises =
      obx.QueryRelationToMany<Multiset, TrainingExercise>(
          _entities[2].relations[0]);
}

/// [Training] entity fields to define ObjectBox queries.
class Training_ {
  /// See [Training.id].
  static final id =
      obx.QueryIntegerProperty<Training>(_entities[3].properties[0]);

  /// See [Training.name].
  static final name =
      obx.QueryStringProperty<Training>(_entities[3].properties[1]);

  /// See [Training.objectives].
  static final objectives =
      obx.QueryStringProperty<Training>(_entities[3].properties[2]);

  /// See [Training.dbType].
  static final dbType =
      obx.QueryIntegerProperty<Training>(_entities[3].properties[3]);

  /// See [Training.dbTrainingDays].
  static final dbTrainingDays =
      obx.QueryStringProperty<Training>(_entities[3].properties[4]);

  /// see [Training.trainingExercises]
  static final trainingExercises =
      obx.QueryRelationToMany<Training, TrainingExercise>(
          _entities[3].relations[0]);

  /// see [Training.multisets]
  static final multisets =
      obx.QueryRelationToMany<Training, Multiset>(_entities[3].relations[1]);

  /// see [Training.trainingVersions]
  static final trainingVersions =
      obx.QueryRelationToMany<Training, TrainingVersion>(
          _entities[3].relations[2]);
}

/// [TrainingExercise] entity fields to define ObjectBox queries.
class TrainingExercise_ {
  /// See [TrainingExercise.id].
  static final id =
      obx.QueryIntegerProperty<TrainingExercise>(_entities[4].properties[0]);

  /// See [TrainingExercise.linkedTrainingId].
  static final linkedTrainingId =
      obx.QueryIntegerProperty<TrainingExercise>(_entities[4].properties[1]);

  /// See [TrainingExercise.linkedMultisetId].
  static final linkedMultisetId =
      obx.QueryIntegerProperty<TrainingExercise>(_entities[4].properties[2]);

  /// See [TrainingExercise.linkedExerciseId].
  static final linkedExerciseId =
      obx.QueryIntegerProperty<TrainingExercise>(_entities[4].properties[3]);

  /// See [TrainingExercise.exercise].
  static final exercise = obx.QueryRelationToOne<TrainingExercise, Exercise>(
      _entities[4].properties[4]);

  /// See [TrainingExercise.specialInstructions].
  static final specialInstructions =
      obx.QueryStringProperty<TrainingExercise>(_entities[4].properties[5]);

  /// See [TrainingExercise.objectives].
  static final objectives =
      obx.QueryStringProperty<TrainingExercise>(_entities[4].properties[6]);

  /// See [TrainingExercise.targetDistance].
  static final targetDistance =
      obx.QueryIntegerProperty<TrainingExercise>(_entities[4].properties[7]);

  /// See [TrainingExercise.targetDuration].
  static final targetDuration =
      obx.QueryIntegerProperty<TrainingExercise>(_entities[4].properties[8]);

  /// See [TrainingExercise.isTargetPaceSelected].
  static final isTargetPaceSelected =
      obx.QueryBooleanProperty<TrainingExercise>(_entities[4].properties[9]);

  /// See [TrainingExercise.targetPace].
  static final targetPace =
      obx.QueryIntegerProperty<TrainingExercise>(_entities[4].properties[10]);

  /// See [TrainingExercise.sets].
  static final sets =
      obx.QueryIntegerProperty<TrainingExercise>(_entities[4].properties[11]);

  /// See [TrainingExercise.isSetsInReps].
  static final isSetsInReps =
      obx.QueryBooleanProperty<TrainingExercise>(_entities[4].properties[12]);

  /// See [TrainingExercise.minReps].
  static final minReps =
      obx.QueryIntegerProperty<TrainingExercise>(_entities[4].properties[13]);

  /// See [TrainingExercise.maxReps].
  static final maxReps =
      obx.QueryIntegerProperty<TrainingExercise>(_entities[4].properties[14]);

  /// See [TrainingExercise.duration].
  static final duration =
      obx.QueryIntegerProperty<TrainingExercise>(_entities[4].properties[15]);

  /// See [TrainingExercise.setRest].
  static final setRest =
      obx.QueryIntegerProperty<TrainingExercise>(_entities[4].properties[16]);

  /// See [TrainingExercise.exerciseRest].
  static final exerciseRest =
      obx.QueryIntegerProperty<TrainingExercise>(_entities[4].properties[17]);

  /// See [TrainingExercise.isAutoStart].
  static final isAutoStart =
      obx.QueryBooleanProperty<TrainingExercise>(_entities[4].properties[18]);

  /// See [TrainingExercise.position].
  static final position =
      obx.QueryIntegerProperty<TrainingExercise>(_entities[4].properties[19]);

  /// See [TrainingExercise.intensity].
  static final intensity =
      obx.QueryIntegerProperty<TrainingExercise>(_entities[4].properties[20]);

  /// See [TrainingExercise.key].
  static final key =
      obx.QueryStringProperty<TrainingExercise>(_entities[4].properties[21]);

  /// See [TrainingExercise.dbType].
  static final dbType =
      obx.QueryIntegerProperty<TrainingExercise>(_entities[4].properties[22]);

  /// See [TrainingExercise.dbRunType].
  static final dbRunType =
      obx.QueryIntegerProperty<TrainingExercise>(_entities[4].properties[23]);
}

/// [HistoryEntry] entity fields to define ObjectBox queries.
class HistoryEntry_ {
  /// See [HistoryEntry.id].
  static final id =
      obx.QueryIntegerProperty<HistoryEntry>(_entities[5].properties[0]);

  /// See [HistoryEntry.linkedTrainingId].
  static final linkedTrainingId =
      obx.QueryIntegerProperty<HistoryEntry>(_entities[5].properties[1]);

  /// See [HistoryEntry.linkedTrainingVersionId].
  static final linkedTrainingVersionId =
      obx.QueryIntegerProperty<HistoryEntry>(_entities[5].properties[2]);

  /// See [HistoryEntry.linkedTrainingExerciseId].
  static final linkedTrainingExerciseId =
      obx.QueryIntegerProperty<HistoryEntry>(_entities[5].properties[3]);

  /// See [HistoryEntry.setNumber].
  static final setNumber =
      obx.QueryIntegerProperty<HistoryEntry>(_entities[5].properties[4]);

  /// See [HistoryEntry.intervalNumber].
  static final intervalNumber =
      obx.QueryIntegerProperty<HistoryEntry>(_entities[5].properties[5]);

  /// See [HistoryEntry.date].
  static final date =
      obx.QueryDateProperty<HistoryEntry>(_entities[5].properties[6]);

  /// See [HistoryEntry.reps].
  static final reps =
      obx.QueryIntegerProperty<HistoryEntry>(_entities[5].properties[7]);

  /// See [HistoryEntry.weight].
  static final weight =
      obx.QueryIntegerProperty<HistoryEntry>(_entities[5].properties[8]);

  /// See [HistoryEntry.duration].
  static final duration =
      obx.QueryIntegerProperty<HistoryEntry>(_entities[5].properties[9]);

  /// See [HistoryEntry.distance].
  static final distance =
      obx.QueryIntegerProperty<HistoryEntry>(_entities[5].properties[10]);

  /// See [HistoryEntry.pace].
  static final pace =
      obx.QueryIntegerProperty<HistoryEntry>(_entities[5].properties[11]);

  /// See [HistoryEntry.calories].
  static final calories =
      obx.QueryIntegerProperty<HistoryEntry>(_entities[5].properties[12]);
}

/// [RunLocation] entity fields to define ObjectBox queries.
class RunLocation_ {
  /// See [RunLocation.id].
  static final id =
      obx.QueryIntegerProperty<RunLocation>(_entities[6].properties[0]);

  /// See [RunLocation.linkedTrainingId].
  static final linkedTrainingId =
      obx.QueryIntegerProperty<RunLocation>(_entities[6].properties[1]);

  /// See [RunLocation.linkedTrainingExerciseId].
  static final linkedTrainingExerciseId =
      obx.QueryIntegerProperty<RunLocation>(_entities[6].properties[2]);

  /// See [RunLocation.setNumber].
  static final setNumber =
      obx.QueryIntegerProperty<RunLocation>(_entities[6].properties[3]);

  /// See [RunLocation.latitude].
  static final latitude =
      obx.QueryDoubleProperty<RunLocation>(_entities[6].properties[4]);

  /// See [RunLocation.longitude].
  static final longitude =
      obx.QueryDoubleProperty<RunLocation>(_entities[6].properties[5]);

  /// See [RunLocation.altitude].
  static final altitude =
      obx.QueryDoubleProperty<RunLocation>(_entities[6].properties[6]);

  /// See [RunLocation.timestamp].
  static final timestamp =
      obx.QueryIntegerProperty<RunLocation>(_entities[6].properties[7]);

  /// See [RunLocation.accuracy].
  static final accuracy =
      obx.QueryDoubleProperty<RunLocation>(_entities[6].properties[8]);

  /// See [RunLocation.speed].
  static final speed =
      obx.QueryDoubleProperty<RunLocation>(_entities[6].properties[9]);
}
